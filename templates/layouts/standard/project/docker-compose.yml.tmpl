version: '3.8'

services:
  {{.ProjectName | snake_case}}:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - GIN_MODE=release
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    networks:
      - {{.ProjectName | snake_case}}_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: {{.ProjectName | snake_case}}_db
      POSTGRES_USER: {{.ProjectName | snake_case}}_user
      POSTGRES_PASSWORD: {{.ProjectName | snake_case}}_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - {{.ProjectName | snake_case}}_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U {{.ProjectName | snake_case}}_user -d {{.ProjectName | snake_case}}_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - {{.ProjectName | snake_case}}_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Database migration service
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["/main", "migrate"]
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgres://{{.ProjectName | snake_case}}_user:{{.ProjectName | snake_case}}_password@postgres:5432/{{.ProjectName | snake_case}}_db?sslmode=disable
    env_file:
      - .env
    networks:
      - {{.ProjectName | snake_case}}_network
    restart: "no"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  {{.ProjectName | snake_case}}_network:
    driver: bridge