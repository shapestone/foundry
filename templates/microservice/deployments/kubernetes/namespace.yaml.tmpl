# Namespace configuration for {{.ProjectName}}
# This creates an isolated namespace for the microservice deployment

apiVersion: v1
kind: Namespace
metadata:
  name: {{.CustomVariables.namespace | default "default"}}
  labels:
    name: {{.CustomVariables.namespace | default "default"}}
    project: {{.ProjectName | lower}}
    environment: {{.CustomVariables.environment | default "development"}}
    managed-by: foundry
    # Istio injection (if using Istio service mesh)
    {{- if eq (.CustomVariables.service_mesh | default "istio") "istio"}}
    istio-injection: enabled
    {{- end}}
    # Linkerd injection (if using Linkerd service mesh)
    {{- if eq (.CustomVariables.service_mesh | default "istio") "linkerd"}}
    linkerd.io/inject: enabled
    {{- end}}
  annotations:
    # Namespace description
    description: "Namespace for {{.ProjectName}} microservices"
    created-by: "foundry-cli"
    # Network policies
    networking.kubernetes.io/policy: "restricted"
    # Resource quotas
    quotas.kubernetes.io/pods: "100"
    quotas.kubernetes.io/requests.cpu: "40"
    quotas.kubernetes.io/requests.memory: "80Gi"
    quotas.kubernetes.io/limits.cpu: "80"
    quotas.kubernetes.io/limits.memory: "160Gi"

---
# Resource Quota for the namespace
apiVersion: v1
kind: ResourceQuota
metadata:
  name: {{.CustomVariables.namespace | default "default"}}-quota
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    project: {{.ProjectName | lower}}
spec:
  hard:
    # Compute resources
    requests.cpu: "40"
    requests.memory: 80Gi
    limits.cpu: "80"
    limits.memory: 160Gi

    # Storage resources
    requests.storage: 1Ti

    # Object counts
    pods: "100"
    persistentvolumeclaims: "50"
    services: "50"
    secrets: "100"
    configmaps: "100"

    # Load balancers
    services.loadbalancers: "10"
    services.nodeports: "0"

---
# Limit Range for default resource limits
apiVersion: v1
kind: LimitRange
metadata:
  name: {{.CustomVariables.namespace | default "default"}}-limits
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    project: {{.ProjectName | lower}}
spec:
  limits:
    # Default limits for containers
    - default:
        cpu: "500m"
        memory: "512Mi"
      defaultRequest:
        cpu: "100m"
        memory: "128Mi"
      type: Container

    # Limits for persistent volume claims
    - max:
        storage: "100Gi"
      min:
        storage: "1Gi"
      type: PersistentVolumeClaim

---
# Network Policy for namespace isolation
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{.CustomVariables.namespace | default "default"}}-network-policy
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    project: {{.ProjectName | lower}}
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Allow ingress from same namespace
    - from:
        - namespaceSelector:
            matchLabels:
              name: {{.CustomVariables.namespace | default "default"}}
    # Allow ingress from istio-system (for service mesh)
    {{- if eq (.CustomVariables.service_mesh | default "istio") "istio"}}
    - from:
        - namespaceSelector:
            matchLabels:
              name: istio-system
    {{- end}}
    # Allow ingress from linkerd (for service mesh)
    {{- if eq (.CustomVariables.service_mesh | default "istio") "linkerd"}}
    - from:
        - namespaceSelector:
            matchLabels:
              name: linkerd
        - namespaceSelector:
            matchLabels:
              name: linkerd-viz
    {{- end}}
    # Allow ingress from monitoring namespace
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: {{.CustomVariables.metrics_port | default "2112"}}
    # Allow ingress from ingress controllers
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
        - namespaceSelector:
            matchLabels:
              name: traefik-system
        - namespaceSelector:
            matchLabels:
              name: kong

  egress:
    # Allow egress to same namespace
    - to:
        - namespaceSelector:
            matchLabels:
              name: {{.CustomVariables.namespace | default "default"}}
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
    # Allow HTTPS to external services
    - to: []
      ports:
        - protocol: TCP
          port: 443
    # Allow HTTP to external services (for development)
    - to: []
      ports:
        - protocol: TCP
          port: 80
    # Allow database access
    - to:
        - namespaceSelector:
            matchLabels:
              name: database
      ports:
        - protocol: TCP
          port: 5432  # PostgreSQL
        - protocol: TCP
          port: 3306  # MySQL
    # Allow cache access
    - to:
        - namespaceSelector:
            matchLabels:
              name: cache
      ports:
        - protocol: TCP
          port: 6379  # Redis
    # Allow message broker access
    {{- if eq (.CustomVariables.message_broker | default "nats") "nats"}}
    - to:
        - namespaceSelector:
            matchLabels:
              name: messaging
      ports:
        - protocol: TCP
          port: 4222  # NATS
    {{- else if eq (.CustomVariables.message_broker | default "nats") "kafka"}}
    - to:
        - namespaceSelector:
            matchLabels:
              name: messaging
      ports:
        - protocol: TCP
          port: 9092  # Kafka
    {{- else if eq (.CustomVariables.message_broker | default "nats") "rabbitmq"}}
    - to:
        - namespaceSelector:
            matchLabels:
              name: messaging
      ports:
        - protocol: TCP
          port: 5672  # RabbitMQ
    {{- end}}

---
# Service Account for the namespace
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{.ProjectName | lower}}-service-account
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    project: {{.ProjectName | lower}}
  annotations:
    description: "Service account for {{.ProjectName}} services"

---
# Role for the service account
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{.ProjectName | lower}}-role
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    project: {{.ProjectName | lower}}
rules:
  # Allow reading configmaps and secrets
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["get", "list", "watch"]
  # Allow reading services for service discovery
  - apiGroups: [""]
    resources: ["services", "endpoints"]
    verbs: ["get", "list", "watch"]
  # Allow reading pods for health checks
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
  # Allow creating events for logging
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]

---
# Role binding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{.ProjectName | lower}}-role-binding
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    project: {{.ProjectName | lower}}
subjects:
  - kind: ServiceAccount
    name: {{.ProjectName | lower}}-service-account
    namespace: {{.CustomVariables.namespace | default "default"}}
roleRef:
  kind: Role
  name: {{.ProjectName | lower}}-role
  apiGroup: rbac.authorization.k8s.io

---
# Pod Security Policy (if using PSP)
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: {{.ProjectName | lower}}-psp
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    project: {{.ProjectName | lower}}
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'

---
# Pod Security Standards (if using Pod Security Standards)
# This replaces PodSecurityPolicy in newer Kubernetes versions
apiVersion: v1
kind: Namespace
metadata:
  name: {{.CustomVariables.namespace | default "default"}}-security-context
  labels:
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted

---
# Priority Class for critical services
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: {{.ProjectName | lower}}-high-priority
value: 1000
globalDefault: false
description: "High priority class for {{.ProjectName}} critical services"

---
# Priority Class for normal services
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: {{.ProjectName | lower}}-normal-priority
value: 100
globalDefault: false
description: "Normal priority class for {{.ProjectName}} services"