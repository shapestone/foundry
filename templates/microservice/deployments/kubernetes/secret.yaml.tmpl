# Secrets management for {{.ProjectName}} microservices
# This file contains all sensitive configuration data

apiVersion: v1
kind: Secret
metadata:
  name: {{.ProjectName | lower}}-secrets
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    app: {{.ProjectName | lower}}
    component: secrets
    version: v1
  annotations:
    description: "Main secrets for {{.ProjectName}} services"
    kubernetes.io/description: "Contains sensitive configuration data"
type: Opaque
data:
  # Database credentials (base64 encoded)
  # Default values - CHANGE THESE IN PRODUCTION
  DATABASE_PASSWORD: "{{.ProjectName | lower}}_password" | base64
  DATABASE_URL: "postgres://{{.ProjectName | lower}}_user:{{.ProjectName | lower}}_password@postgres.database.svc.cluster.local:5432/{{.ProjectName | lower}}_db?sslmode=require" | base64

  # Redis password (if using auth)
  REDIS_PASSWORD: "" | base64
  REDIS_URL: "redis://redis.cache.svc.cluster.local:6379/0" | base64

  {{- if eq (.CustomVariables.message_broker | default "nats") "nats"}}
  # NATS credentials
  NATS_USER: "" | base64
  NATS_PASSWORD: "" | base64
  NATS_URL: "nats://nats.messaging.svc.cluster.local:4222" | base64

  {{- else if eq (.CustomVariables.message_broker | default "nats") "kafka"}}
  # Kafka credentials
  KAFKA_SASL_USERNAME: "" | base64
  KAFKA_SASL_PASSWORD: "" | base64

  {{- else if eq (.CustomVariables.message_broker | default "nats") "rabbitmq"}}
  # RabbitMQ credentials
  RABBITMQ_PASSWORD: "guest" | base64
  RABBITMQ_URL: "amqp://guest:guest@rabbitmq.messaging.svc.cluster.local:5672/" | base64
  {{- end}}

  # JWT secret key
  JWT_SECRET: "your-super-secret-jwt-key-change-this-in-production-and-make-it-much-longer" | base64

  # API keys for external services
  AUTH_SERVICE_API_KEY: "" | base64
  NOTIFICATION_SERVICE_API_KEY: "" | base64
  BILLING_SERVICE_API_KEY: "" | base64

  # Encryption keys
  ENCRYPTION_KEY: "32-byte-encryption-key-change-this" | base64

  # Session secret
  SESSION_SECRET: "session-secret-key-change-this-too" | base64

  # CSRF key
  CSRF_KEY: "32-byte-long-csrf-auth-key-change" | base64

---
# TLS/SSL certificates
apiVersion: v1
kind: Secret
metadata:
  name: {{.ProjectName | lower}}-tls-certs
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    app: {{.ProjectName | lower}}
    component: tls
type: kubernetes.io/tls
data:
  # TLS certificate and key (base64 encoded)
  # These should be replaced with actual certificates
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t...
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t...

---
# CA certificates for external services
apiVersion: v1
kind: Secret
metadata:
  name: {{.ProjectName | lower}}-ca-certs
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    app: {{.ProjectName | lower}}
    component: ca-certs
type: Opaque
data:
  # CA certificate for database
  database-ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t...

  # CA certificate for external services
  external-services-ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t...

---
# Docker registry credentials
apiVersion: v1
kind: Secret
metadata:
  name: {{.ProjectName | lower}}-registry-secret
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    app: {{.ProjectName | lower}}
    component: registry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: ewogICJhdXRocyI6IHsKICAgICJ5b3VyLXJlZ2lzdHJ5LmNvbSI6IHsKICAgICAgInVzZXJuYW1lIjogInlvdXItdXNlcm5hbWUiLAogICAgICAicGFzc3dvcmQiOiAieW91ci1wYXNzd29yZCIsCiAgICAgICJhdXRoIjogImJhc2U2NC1lbmNvZGVkLXVzZXJuYW1lOnBhc3N3b3JkIgogICAgfQogIH0KfQ==

---
# Service account token secret (for older Kubernetes versions)
apiVersion: v1
kind: Secret
metadata:
  name: {{.ProjectName | lower}}-service-account-token
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    app: {{.ProjectName | lower}}
    component: service-account
  annotations:
    kubernetes.io/service-account.name: {{.ProjectName | lower}}-service-account
type: kubernetes.io/service-account-token

---
# External service credentials
apiVersion: v1
kind: Secret
metadata:
  name: {{.ProjectName | lower}}-external-secrets
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    app: {{.ProjectName | lower}}
    component: external-secrets
type: Opaque
data:
  # AWS credentials (if using AWS services)
  AWS_ACCESS_KEY_ID: "" | base64
  AWS_SECRET_ACCESS_KEY: "" | base64
  AWS_REGION: "us-west-2" | base64

  # Google Cloud credentials (if using GCP services)
  GOOGLE_APPLICATION_CREDENTIALS_JSON: "" | base64

  # Azure credentials (if using Azure services)
  AZURE_CLIENT_ID: "" | base64
  AZURE_CLIENT_SECRET: "" | base64
  AZURE_TENANT_ID: "" | base64

  # Third-party API keys
  STRIPE_SECRET_KEY: "" | base64
  SENDGRID_API_KEY: "" | base64
  TWILIO_AUTH_TOKEN: "" | base64

  # OAuth client secrets
  GITHUB_CLIENT_SECRET: "" | base64
  GOOGLE_CLIENT_SECRET: "" | base64
  FACEBOOK_CLIENT_SECRET: "" | base64

---
# Database migration secrets
apiVersion: v1
kind: Secret
metadata:
  name: {{.ProjectName | lower}}-migration-secrets
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    app: {{.ProjectName | lower}}
    component: migrations
type: Opaque
data:
  # Migration-specific database credentials
  MIGRATION_DATABASE_URL: "postgres://{{.ProjectName | lower}}_migration_user:migration_password@postgres.database.svc.cluster.local:5432/{{.ProjectName | lower}}_db?sslmode=require" | base64
  MIGRATION_DATABASE_PASSWORD: "migration_password" | base64

---
# Monitoring secrets
apiVersion: v1
kind: Secret
metadata:
  name: {{.ProjectName | lower}}-monitoring-secrets
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    app: {{.ProjectName | lower}}
    component: monitoring
type: Opaque
data:
  # Grafana admin password
  GRAFANA_ADMIN_PASSWORD: "admin123" | base64

  # Prometheus alert manager webhook URLs
  SLACK_WEBHOOK_URL: "" | base64
  PAGERDUTY_INTEGRATION_KEY: "" | base64

  # Jaeger authentication (if required)
  JAEGER_AUTH_TOKEN: "" | base64

---
# Environment-specific secrets
{{- if eq (.CustomVariables.environment | default "development") "development"}}
apiVersion: v1
kind: Secret
metadata:
  name: {{.ProjectName | lower}}-dev-secrets
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    app: {{.ProjectName | lower}}
    component: secrets
    environment: development
type: Opaque
data:
  # Development-specific secrets
  DEBUG_TOKEN: "dev-debug-token-123" | base64
  TEST_API_KEY: "test-api-key-456" | base64

{{- else if eq (.CustomVariables.environment | default "development") "staging"}}
apiVersion: v1
kind: Secret
metadata:
  name: {{.ProjectName | lower}}-staging-secrets
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    app: {{.ProjectName | lower}}
    component: secrets
    environment: staging
type: Opaque
data:
  # Staging-specific secrets
  STAGING_API_KEY: "" | base64
  STAGING_DATABASE_PASSWORD: "" | base64

{{- else if eq (.CustomVariables.environment | default "development") "production"}}
apiVersion: v1
kind: Secret
metadata:
  name: {{.ProjectName | lower}}-prod-secrets
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    app: {{.ProjectName | lower}}
    component: secrets
    environment: production
type: Opaque
data:
  # Production-specific secrets
  PROD_DATABASE_PASSWORD: "" | base64
  PROD_JWT_SECRET: "" | base64
  PROD_ENCRYPTION_KEY: "" | base64
{{- end}}

---
# Sealed Secret (if using Sealed Secrets controller)
# This is an example of how to use Sealed Secrets for GitOps workflows
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: {{.ProjectName | lower}}-sealed-secrets
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    app: {{.ProjectName | lower}}
    component: sealed-secrets
spec:
  encryptedData:
    # These would be encrypted values generated by kubeseal
    DATABASE_PASSWORD: AgBy3i4OJSWK+PiTySYZZA9rO43cGDEQAx...
    JWT_SECRET: AgAKAoiQm2ck8SAKDAJASKLDAJKLDJKLAJD...
  template:
    metadata:
      name: {{.ProjectName | lower}}-sealed-secrets
      namespace: {{.CustomVariables.namespace | default "default"}}
    type: Opaque

---
# External Secrets Operator (if using External Secrets)
# This is an example of how to sync secrets from external secret stores
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: {{.ProjectName | lower}}-secret-store
  namespace: {{.CustomVariables.namespace | default "default"}}
spec:
  provider:
    # Example for AWS Secrets Manager
    aws:
      service: SecretsManager
      region: us-west-2
      auth:
        secretRef:
          accessKeyIDSecretRef:
            name: aws-secret
            key: access-key-id
          secretAccessKeySecretRef:
            name: aws-secret
            key: secret-access-key

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{.ProjectName | lower}}-external-secret
  namespace: {{.CustomVariables.namespace | default "default"}}
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: {{.ProjectName | lower}}-secret-store
    kind: SecretStore
  target:
    name: {{.ProjectName | lower}}-external-secrets
    creationPolicy: Owner
  data:
    - secretKey: database-password
      remoteRef:
        key: {{.ProjectName | lower}}/database
        property: password
    - secretKey: jwt-secret
      remoteRef:
        key: {{.ProjectName | lower}}/auth
        property: jwt-secret