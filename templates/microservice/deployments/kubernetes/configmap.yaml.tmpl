# Configuration management for {{.ProjectName}} microservices
# This file contains all configuration data needed by the services

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{.ProjectName | lower}}-config
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    app: {{.ProjectName | lower}}
    component: config
    version: v1
  annotations:
    description: "Main configuration for {{.ProjectName}} services"
    config.kubernetes.io/local-config: "true"
data:
  # Environment
  ENVIRONMENT: "{{.CustomVariables.environment | default "development"}}"

  # Service configuration
  SERVICE_NAME: "{{.CustomVariables.service_name | default "user"}}"
  SERVICE_VERSION: "1.0.0"

  # Server ports
  GRPC_PORT: "{{.CustomVariables.grpc_port | default "9090"}}"
  HTTP_PORT: "{{.CustomVariables.http_port | default "8080"}}"
  METRICS_PORT: "{{.CustomVariables.metrics_port | default "2112"}}"

  # Server timeouts
  READ_TIMEOUT: "15s"
  WRITE_TIMEOUT: "15s"
  IDLE_TIMEOUT: "60s"
  SHUTDOWN_TIMEOUT: "30s"

  # Database configuration
  DATABASE_DRIVER: "{{.CustomVariables.database_driver | default "postgres"}}"
  DATABASE_HOST: "postgres.database.svc.cluster.local"
  DATABASE_PORT: "5432"
  DATABASE_NAME: "{{.ProjectName | lower}}_db"
  DATABASE_USER: "{{.ProjectName | lower}}_user"
  DATABASE_SSL_MODE: "require"
  DATABASE_MAX_OPEN_CONNS: "25"
  DATABASE_MAX_IDLE_CONNS: "25"
  DATABASE_CONN_MAX_LIFETIME: "5m"
  DATABASE_CONN_MAX_IDLE_TIME: "5m"

  # Redis configuration
  REDIS_HOST: "redis.cache.svc.cluster.local"
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  REDIS_MAX_RETRIES: "3"
  REDIS_POOL_SIZE: "10"
  REDIS_MIN_IDLE_CONNS: "5"
  REDIS_DIAL_TIMEOUT: "5s"
  REDIS_READ_TIMEOUT: "3s"
  REDIS_WRITE_TIMEOUT: "3s"

  {{- if eq (.CustomVariables.message_broker | default "nats") "nats"}}
  # NATS configuration
  MESSAGE_BROKER_TYPE: "nats"
  NATS_HOST: "nats.messaging.svc.cluster.local"
  NATS_PORT: "4222"
  NATS_CLUSTER_ID: "{{.ProjectName | lower}}-cluster"
  NATS_MAX_RECONNECTS: "5"
  NATS_RECONNECT_WAIT: "2s"
  NATS_TIMEOUT: "2s"

  {{- else if eq (.CustomVariables.message_broker | default "nats") "kafka"}}
  # Kafka configuration
  MESSAGE_BROKER_TYPE: "kafka"
  KAFKA_BROKERS: "kafka.messaging.svc.cluster.local:9092"
  KAFKA_CONSUMER_GROUP: "{{.ProjectName | lower}}-consumers"
  KAFKA_CLIENT_ID: "{{.ProjectName | lower}}-{{.CustomVariables.service_name | default "user"}}"
  KAFKA_VERSION: "2.8.0"
  KAFKA_SESSION_TIMEOUT: "10s"
  KAFKA_HEARTBEAT_INTERVAL: "3s"
  KAFKA_REBALANCE_TIMEOUT: "60s"
  KAFKA_RETRY_BACKOFF: "2s"
  KAFKA_RETRY_MAX: "3"

  {{- else if eq (.CustomVariables.message_broker | default "nats") "rabbitmq"}}
  # RabbitMQ configuration
  MESSAGE_BROKER_TYPE: "rabbitmq"
  RABBITMQ_HOST: "rabbitmq.messaging.svc.cluster.local"
  RABBITMQ_PORT: "5672"
  RABBITMQ_USER: "guest"
  RABBITMQ_VHOST: "/"
  RABBITMQ_EXCHANGE: "{{.ProjectName | lower}}-exchange"
  RABBITMQ_HEARTBEAT: "10s"
  RABBITMQ_CONNECTION_TIMEOUT: "30s"
  RABBITMQ_CHANNEL_MAX: "0"
  {{- end}}

  # Logging configuration
  LOG_LEVEL: "info"
  LOG_FORMAT: "json"
  LOG_OUTPUT: "stdout"

  # Metrics configuration
  METRICS_ENABLED: "true"
  METRICS_PATH: "/metrics"
  PROMETHEUS_NAMESPACE: "{{.ProjectName | lower}}"
  PROMETHEUS_SUBSYSTEM: "{{.CustomVariables.service_name | default "user"}}"

  # Tracing configuration
  TRACING_ENABLED: "true"
  JAEGER_ENDPOINT: "http://jaeger-collector.observability.svc.cluster.local:14268/api/traces"
  JAEGER_SERVICE_NAME: "{{.ProjectName | lower}}-{{.CustomVariables.service_name | default "user"}}"
  JAEGER_SAMPLER_TYPE: "const"
  JAEGER_SAMPLER_PARAM: "0.1"

  # CORS configuration
  CORS_ENABLED: "true"
  CORS_ALLOWED_ORIGINS: "*"
  CORS_ALLOWED_METHODS: "GET,POST,PUT,DELETE,OPTIONS"
  CORS_ALLOWED_HEADERS: "Content-Type,Authorization,X-Request-ID"
  CORS_MAX_AGE: "12h"

  # Rate limiting configuration
  RATE_LIMIT_ENABLED: "true"
  RATE_LIMIT_REQUESTS: "100"
  RATE_LIMIT_BURST: "10"
  RATE_LIMIT_WINDOW: "1m"

  # Circuit breaker configuration
  CIRCUIT_BREAKER_ENABLED: "true"
  CIRCUIT_BREAKER_MAX_REQUESTS: "10"
  CIRCUIT_BREAKER_INTERVAL: "60s"
  CIRCUIT_BREAKER_TIMEOUT: "30s"
  CIRCUIT_BREAKER_MAX_CONSECUTIVE_FAILURES: "5"

  # Health check configuration
  HEALTH_CHECK_INTERVAL: "30s"
  HEALTH_CHECK_TIMEOUT: "10s"

  # Feature flags
  FEATURE_NEW_API_ENABLED: "false"
  FEATURE_EXPERIMENTAL_CACHING: "false"
  FEATURE_ENHANCED_LOGGING: "true"

  # Kubernetes configuration
  KUBERNETES_NAMESPACE: "{{.CustomVariables.namespace | default "default"}}"
  KUBERNETES_SERVICE_ACCOUNT: "{{.ProjectName | lower}}-service-account"

---
# Application-specific configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{.CustomVariables.service_name | default "user"}}-service-config
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    app: {{.CustomVariables.service_name | default "user"}}-service
    component: config
    version: v1
data:
  # Service-specific configuration can be added here
  service.yaml: |
    service:
      name: "{{.CustomVariables.service_name | default "user"}}"
      description: "{{.CustomVariables.service_name | title}} microservice"
      version: "1.0.0"

    features:
      enable_caching: true
      enable_metrics: true
      enable_tracing: true

    business_rules:
      max_items_per_request: 100
      request_timeout: "30s"
      retry_attempts: 3

---
# Environment-specific configuration overlay
{{- if eq (.CustomVariables.environment | default "development") "development"}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{.ProjectName | lower}}-config-dev
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    app: {{.ProjectName | lower}}
    component: config
    environment: development
data:
  # Development overrides
  LOG_LEVEL: "debug"
  TRACING_ENABLED: "true"
  JAEGER_SAMPLER_PARAM: "1.0"  # 100% sampling in dev
  RATE_LIMIT_REQUESTS: "1000"  # Higher limits in dev
  CORS_ALLOWED_ORIGINS: "*"    # Permissive CORS in dev

{{- else if eq (.CustomVariables.environment | default "development") "staging"}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{.ProjectName | lower}}-config-staging
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    app: {{.ProjectName | lower}}
    component: config
    environment: staging
data:
  # Staging overrides
  LOG_LEVEL: "info"
  JAEGER_SAMPLER_PARAM: "0.1"  # 10% sampling in staging
  RATE_LIMIT_REQUESTS: "500"

{{- else if eq (.CustomVariables.environment | default "development") "production"}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{.ProjectName | lower}}-config-prod
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    app: {{.ProjectName | lower}}
    component: config
    environment: production
data:
  # Production overrides
  LOG_LEVEL: "warn"
  JAEGER_SAMPLER_PARAM: "0.01"  # 1% sampling in production
  RATE_LIMIT_REQUESTS: "100"
  CORS_ALLOWED_ORIGINS: "https://{{.ProjectName | lower}}.com"
  DATABASE_SSL_MODE: "require"
{{- end}}

---
# External service configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{.ProjectName | lower}}-external-services
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    app: {{.ProjectName | lower}}
    component: config
    type: external-services
data:
  # External service endpoints
  AUTH_SERVICE_URL: "http://auth-service.{{.CustomVariables.namespace | default "default"}}.svc.cluster.local:8080"
  AUTH_SERVICE_TIMEOUT: "30s"
  AUTH_SERVICE_RETRIES: "3"

  NOTIFICATION_SERVICE_URL: "http://notification-service.{{.CustomVariables.namespace | default "default"}}.svc.cluster.local:8080"
  NOTIFICATION_SERVICE_TIMEOUT: "30s"
  NOTIFICATION_SERVICE_RETRIES: "3"

  BILLING_SERVICE_URL: "http://billing-service.{{.CustomVariables.namespace | default "default"}}.svc.cluster.local:8080"
  BILLING_SERVICE_TIMEOUT: "30s"
  BILLING_SERVICE_RETRIES: "3"

---
# Monitoring configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{.ProjectName | lower}}-monitoring
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    app: {{.ProjectName | lower}}
    component: monitoring
data:
  # Prometheus configuration
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    scrape_configs:
      - job_name: '{{.CustomVariables.service_name | default "user"}}-service'
        static_configs:
          - targets: ['{{.CustomVariables.service_name | default "user"}}-service:{{.CustomVariables.metrics_port | default "2112"}}']
        metrics_path: /metrics
        scrape_interval: 30s

  # Grafana dashboard configuration
  grafana-dashboard.json: |
    {
      "dashboard": {
        "title": "{{.ProjectName}} - {{.CustomVariables.service_name | title}} Service",
        "panels": [
          {
            "title": "Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate({{.ProjectName | lower}}_{{.CustomVariables.service_name | default "user"}}_http_requests_total[5m])"
              }
            ]
          }
        ]
      }
    }

---
# Security configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{.ProjectName | lower}}-security
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    app: {{.ProjectName | lower}}
    component: security
data:
  # Security headers
  SECURITY_HEADERS_ENABLED: "true"

  # TLS configuration
  TLS_ENABLED: "false"
  TLS_CERT_FILE: "/etc/ssl/certs/server.crt"
  TLS_KEY_FILE: "/etc/ssl/private/server.key"
  TLS_CA_FILE: "/etc/ssl/certs/ca.crt"

  # JWT configuration (non-sensitive parts)
  JWT_EXPIRATION: "24h"
  JWT_ISSUER: "{{.ProjectName | lower}}"
  JWT_AUDIENCE: "{{.ProjectName | lower}}-api"

---
# Migration configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{.ProjectName | lower}}-migrations
  namespace: {{.CustomVariables.namespace | default "default"}}
  labels:
    app: {{.ProjectName | lower}}
    component: migrations
data:
  migrate.sh: |
    #!/bin/bash
    set -e

    echo "Starting database migrations..."

    # Wait for database to be ready
    until pg_isready -h $DATABASE_HOST -p $DATABASE_PORT -U $DATABASE_USER; do
      echo "Waiting for database..."
      sleep 2
    done

    # Run migrations
    migrate -path /migrations -database "$DATABASE_URL" up

    echo "Migrations completed successfully"

  rollback.sh: |
    #!/bin/bash
    set -e

    echo "Rolling back database migrations..."

    # Rollback one migration
    migrate -path /migrations -database "$DATABASE_URL" down 1

    echo "Rollback completed successfully"