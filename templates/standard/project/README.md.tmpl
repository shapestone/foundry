# {{.ProjectName}}

{{.Description | default "A Go application built with Foundry CLI"}}

## Quick Start

### Prerequisites

- Go {{.GoVersion | default "1.21"}} or later
- Make (optional, for using Makefile commands)

### Installation

1. Clone the repository:
```bash
git clone <repository-url>
cd {{.ProjectName | snake_case}}
```

2. Install dependencies:
```bash
go mod download
```

3. Copy environment configuration:
```bash
cp .env.example .env
```

4. Run the application:
```bash
go run main.go
```

The server will start on port 8080 by default.

### Using Make Commands

```bash
# Build the application
make build

# Run the application
make run

# Run tests
make test

# Clean build artifacts
make clean

# Run with live reload (requires air)
make dev
```

## API Endpoints

- `GET /health` - Health check endpoint
- `GET /api/v1/example` - Example API endpoint

## Environment Variables

| Variable | Description | Default |
|----------|-------------|---------|
| PORT | Server port | 8080 |

## Project Structure

```
{{.ProjectName | snake_case}}/
├── cmd/
│   └── {{.ProjectName | snake_case}}/
│       └── main.go           # Application entry point
├── internal/
│   ├── handlers/             # HTTP handlers
│   ├── models/               # Data models
│   ├── services/             # Business logic
│   └── repository/           # Data access layer
├── pkg/                      # Public packages
├── configs/                  # Configuration files
├── docs/                     # Documentation
├── scripts/                  # Build and deployment scripts
├── go.mod
├── go.sum
├── Makefile
├── Dockerfile
├── docker-compose.yml
├── .env.example
├── .gitignore
└── README.md
```

## Development

### Adding New Components

Use Foundry CLI to generate new components:

```bash
# Generate a new handler
foundry add handler user

# Generate a new model
foundry add model user

# Generate a new service
foundry add service user

# Generate a new repository
foundry add repository user

# Generate middleware
foundry add middleware auth
```

### Docker Development

```bash
# Build and run with Docker Compose
docker-compose up --build

# Run in detached mode
docker-compose up -d

# View logs
docker-compose logs -f

# Stop services
docker-compose down
```

## Testing

```bash
# Run all tests
go test ./...

# Run tests with coverage
go test -cover ./...

# Run tests with verbose output
go test -v ./...
```

## Deployment

### Building for Production

```bash
# Build binary
make build

# Build Docker image
docker build -t {{.ProjectName | snake_case}} .
```

### Environment Configuration

Ensure all required environment variables are set in your production environment. See `.env.example` for the complete list.

## Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## License

This project is licensed under the MIT License - see the LICENSE file for details.