package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"{{if .github_username}}github.com/{{.github_username}}/{{end}}{{.project_name}}/internal/adapters/primary"
	"{{if .github_username}}github.com/{{.github_username}}/{{end}}{{.project_name}}/internal/adapters/secondary"
	"{{if .github_username}}github.com/{{.github_username}}/{{end}}{{.project_name}}/internal/core/services"

	"github.com/gorilla/mux"
	"github.com/joho/godotenv"
)

func main() {
	// Load environment variables
	if err := godotenv.Load(); err != nil {
		log.Println("No .env file found")
	}

	// Configuration
	config := &Config{
		Port:         getEnv("HTTP_PORT", "{{.http_port}}"),
		ReadTimeout:  parseDuration(getEnv("READ_TIMEOUT", "{{.read_timeout}}")),
		WriteTimeout: parseDuration(getEnv("WRITE_TIMEOUT", "{{.write_timeout}}")),
		IdleTimeout:  parseDuration(getEnv("IDLE_TIMEOUT", "{{.idle_timeout}}")),
	}

	// Initialize adapters (dependency injection)
	// Secondary adapters (driven)
	userRepo := secondary.NewInMemoryUserRepository()

	// Core services
	userService := services.NewUserService(userRepo)

	// Primary adapters (driving)
	httpAdapter := primary.NewHTTPAdapter(userService)

	// Setup router
	router := mux.NewRouter()
	httpAdapter.RegisterRoutes(router)

	// Create server
	server := &http.Server{
		Addr:         ":" + config.Port,
		Handler:      router,
		ReadTimeout:  config.ReadTimeout,
		WriteTimeout: config.WriteTimeout,
		IdleTimeout:  config.IdleTimeout,
	}

	// Start server in a goroutine
	go func() {
		log.Printf("Server starting on port %s", config.Port)
		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("Server failed to start: %v", err)
		}
	}()

	// Wait for interrupt signal to gracefully shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	log.Println("Server shutting down...")

	// Graceful shutdown with timeout
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	if err := server.Shutdown(ctx); err != nil {
		log.Fatalf("Server forced to shutdown: %v", err)
	}

	log.Println("Server exited")
}

type Config struct {
	Port         string
	ReadTimeout  time.Duration
	WriteTimeout time.Duration
	IdleTimeout  time.Duration
}

func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

func parseDuration(s string) time.Duration {
	duration, err := time.ParseDuration(s)
	if err != nil {
		log.Printf("Invalid duration %s, using default", s)
		return 15 * time.Second
	}
	return duration
}