package domain

import (
	"errors"
	"time"
)

// User represents a user entity in the domain
type User struct {
	ID        string
	Email     string
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

// NewUser creates a new user with validation
func NewUser(id, email, name string) (*User, error) {
	if id == "" {
		return nil, ErrInvalidUserID
	}
	if email == "" {
		return nil, ErrInvalidEmail
	}
	if name == "" {
		return nil, ErrInvalidName
	}

	now := time.Now()
	return &User{
		ID:        id,
		Email:     email,
		Name:      name,
		CreatedAt: now,
		UpdatedAt: now,
	}, nil
}

// UpdateName updates the user's name
func (u *User) UpdateName(name string) error {
	if name == "" {
		return ErrInvalidName
	}
	u.Name = name
	u.UpdatedAt = time.Now()
	return nil
}

// UpdateEmail updates the user's email
func (u *User) UpdateEmail(email string) error {
	if email == "" {
		return ErrInvalidEmail
	}
	u.Email = email
	u.UpdatedAt = time.Now()
	return nil
}

// IsValid checks if the user is in a valid state
func (u *User) IsValid() bool {
	return u.ID != "" && u.Email != "" && u.Name != ""
}

// Domain errors
var (
	ErrInvalidUserID = errors.New("invalid user ID")
	ErrInvalidEmail  = errors.New("invalid email")
	ErrInvalidName   = errors.New("invalid name")
	ErrUserNotFound  = errors.New("user not found")
	ErrUserExists    = errors.New("user already exists")
)